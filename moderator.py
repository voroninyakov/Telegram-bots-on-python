from telebot.types import InlineKeyboardMarkup, InlineKeyboardButton
import telebot
import codecs
import os.path

TOKEN = ""  # –≤–∞—à —Ç–æ–∫–µ–Ω
bot = telebot.TeleBot(TOKEN)

number_of_warnings = 5  # –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π

make_new_word = [False, 0, 0]

your_id = ''  # id —Ç–æ–≥–æ, –∫—Ç–æ —Å–º–æ–∂–µ—Ç —É–ø—Ä–∞–≤–ª—è—Ç—å –±–æ—Ç–æ–º

# daymaner

menu = InlineKeyboardMarkup()

quantity_warning = {}


def read(what, file):
    """
    :param what: –ß—Ç–æ –º—ã —Å—á–∏—Ç—ã–≤–∞–µ–º (—Å–ª–æ–≤–∞ –∏–ª–∏ —á–∞—Ç—ã).
    :param file: –ö–∞–∫–æ–π —Ñ–∞–π–ª —Å—á–∏—Ç—ã–≤–∞–µ–º.
    :return: –õ–∏–±–æ —Å–ø–∏—Å–æ–∫ —Å–ª–æ–≤, –ª–∏–±–æ —Å–ª–æ–≤–∞—Ä—å —Ñ–∞–π–ª–æ–≤ {id_—á–∞—Ç–∞: –∏–º—è_—Ñ–∞–π–ª–∞_—Å–ª–æ–≤_—á–∞—Ç–∞}.
    """
    if what == '—Å–ª–æ–≤–∞':
        if os.path.exists(file):
            with codecs.open(file, mode='r', encoding='utf-8') as f:
                ftext = f.read()
                splt_word = ftext.split('\r')
                for i in splt_word:
                    if i == '':
                        splt_word.remove('')
                return splt_word
        else:
            with open(file, mode='w+'):
                pass
            return []
    elif what == '—á–∞—Ç—ã':
        chats = {}
        with codecs.open('chats_id.txt', 'r', encoding='utf-8') as f:
            ftext = f.read()
            splt_id = ftext.split(' ')
            for i in splt_id:
                if i == '':
                    splt_id.remove('')
            for i in range(len(splt_id)):
                splt_id[i] = int(splt_id[i])
        with codecs.open('chats_name.txt', 'r', encoding='utf-8') as f:
            ftext = f.read()
            splt_name = ftext.split('\r')
            for i in splt_name:
                if i == '':
                    splt_name.remove('')
        for i in range(len(splt_id)):
            chats[str(splt_id[i])] = splt_name[i]
        return chats
    else:
        return {}


def write(what, listof, file):
    """

    :param what: –¢–æ, —á—Ç–æ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º.
    :param listof: –°–ø–∏—Å–æ–∫ —Ç–æ–≥–æ, —á—Ç–æ –º—ã –∑–∞–ø–∏—Å—ã–≤–∞–µ–º.
    :param file: –ö–∞–∫–æ–π —Ñ–∞–π–ª –º—ã –æ—Ç–∫—Ä–æ–µ–º –¥–ª—è –∑–∞–ø–∏—Å–∏.
    :return: None, –º—ã –Ω–µ—á–µ–≥–æ –Ω–µ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º, –∞ –ø—Ä–æ—Å—Ç–æ –∑–∞–ø–∏—Å—ã–≤–∞–µ–º –≤—Å—ë –≤ —Ñ–∞–π–ª—ã.
    """
    if what == '—Å–ª–æ–≤–∞':
        with open(file, 'w+', encoding='utf-8') as f:
            words = ''
            for i in listof:
                words += f'{i}\r'
            f.write(words)
    elif what == '—á–∞—Ç—ã':
        with open('chats_name.txt', 'w', encoding='utf-8') as f:
            for chat_id in listof:
                f.write(f"{listof[chat_id]}\r")
        with open('chats_id.txt', 'w', encoding='utf-8') as f:
            for chat_id in listof:
                f.write(f"{chat_id} ")


@bot.message_handler(content_types=['new_chat_members'])
def delete_join_message(message):
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except telebot.apihelper.ApiTelegramException:
        pass


@bot.message_handler(content_types=['left_chat_member'])
def delete_leave_message(message):
    try:
        bot.delete_message(message.chat.id, message.message_id)
    except telebot.apihelper.ApiTelegramException:
        pass


@bot.message_handler(commands=['run'])
def starts(message):
    if message.from_user.username == 'klliru' or message.from_user.username == 'i_in_telegram':
        chats_menu = InlineKeyboardMarkup()
        chats_where_user_is_admin = []
        chats = read('—á–∞—Ç—ã', None)
        f = chats
        try:
            for chats_id in chats:
                chat_id = int(chats_id)
                try:
                    if bot.get_chat_member(chat_id, message.from_user.id).status == 'administrator' or \
                            bot.get_chat_member(chat_id, message.from_user.id).status == 'creator':
                        chats_menu.add(InlineKeyboardButton(str(read('—á–∞—Ç—ã', None)[chats_id]),
                                                            callback_data=f'{chat_id} chats_menu'))
                        chats_where_user_is_admin.append(chat_id)
                except telebot.apihelper.ApiTelegramException:
                    del f[chats_id]
                    write('—á–∞—Ç—ã', f, 'daymaner')
                    os.remove(f'{chats_id}.txt')
            if chats_where_user_is_admin:
                bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!üòÅ\n \
–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–≤–∞!', reply_markup=chats_menu)
            else:
                bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!‚òπÔ∏èüò¢ü•∫\n \
—Ç—ã –Ω–∏–∫—É–¥–∞ –º–µ–Ω—è –Ω–µ –¥–æ–±–∞–≤–∏–ª!', reply_markup=chats_menu)
        except RuntimeError:
            bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!\n \
–Ø –Ω–µ —É—Å–ø–µ–ª —É–¥–∞–ª–∏—Ç—å –≥—Ä—É–ø–ø—Éüò¢ \n –û—Ç–ø—Ä–∞–≤—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑', reply_markup=chats_menu)
        except telebot.apihelper.ApiTelegramException:
            bot.send_message(message.from_user.id, f'–ü—Ä–∏–≤–µ—Ç {message.from_user.username}!\n \
            –Ø –Ω–µ —É–¥–∞–ª–∏–ª –≥—Ä—É–ø–ø—Éüò¢ \n –û—Ç–ø—Ä–∞–≤—å —ç—Ç—É –∫–æ–º–∞–Ω–¥—É –µ—â—ë —Ä–∞–∑', reply_markup=chats_menu)


@bot.message_handler(commands=['help'])
def menu_chats(message):
    if message.from_user.username == 'klliru' or message.from_user.username == 'i_in_telegram':
        bot.send_message(message.from_user.id, f'–¢—ã –ø—Ä–∏—Å–ª–∞–ª –∫–æ–º–∞–Ω–¥—É –ø–æ–º–æ—â—å —Å–µ–π—á–∞—Å –æ—Ç–≤–µ—á—É –Ω–∞ –≤–æ–∑–º–æ–∂–Ω—ã–µ –≤–æ–ø—Ä–æ—Å—ã: \n \
–ö–∞–∫ –¥–æ–±–∞–≤–∏—Ç—å –≥—Ä—É–ø–ø—É? \n \
\n \
–î–æ–±–∞–≤—å –≤ –≥—Ä—É–ø–ø—É —ç—Ç–æ–≥–æ –±–æ—Ç–∞.–ó–∞—Ç–µ–º —Å–¥–µ–ª–∞–π –µ–≥–æ —Ç–∞–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º –∏ –Ω–∞–ø–∏—à–∏ –≤ —á–∞—Ç –∫–æ—Ç–æ—Ä—ã–π –¥–æ–±–∞–≤–∏—à—å\
–ª—é–±–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ.–ï—Å–ª–∏ –≥—Ä—É–ø–ø–∞ –Ω–µ –±—ã–ª–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞, —Ç–æ –±–æ—Ç –¥–æ–±–∞–≤–∏—Ç –µ—ë.–°–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ –¥–ª—è –≤—Å–µ—Ö —ç—Ç–∏—Ö –¥–µ–π—Å—Ç–≤–∏–π —Ç—ã –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å \
–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º.', reply_markup=menu)


@bot.callback_query_handler(func=lambda call: True)
def to_chat(call):
    menu_words = InlineKeyboardMarkup()
    call_data = call.data.split(' ')
    chat_id = call_data[0]
    if call_data[1] == 'chats_menu':
        menu_of_chats = InlineKeyboardMarkup()
        menu_of_chats.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', callback_data=f'{chat_id} —Å–æ–∑–¥–∞—Ç—å'))
        if read('—Å–ª–æ–≤–∞', f'{chat_id}.txt'):
            menu_of_chats.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', callback_data=f'{chat_id} —É–¥–∞–ª–∏—Ç—å'))
        menu_of_chats.add(InlineKeyboardButton('–í—ã–π—Ç–∏', callback_data=f'–≤—ã–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {chat_id}'))
        bot.send_message(call.from_user.id, '–¢–∞–∫ —Ç–µ–ø–µ—Ä—å –≤—ã–±–µ—Ä–∏ —á—Ç–æ –±—É–¥–µ—à—å –¥–µ–ª–∞—Ç—å', reply_markup=menu_of_chats)
    elif call_data[1] == '—É–¥–∞–ª–∏—Ç—å':
        words_of_chat = read('—Å–ª–æ–≤–∞', f'{chat_id}.txt')
        if words_of_chat:
            for word in words_of_chat:
                menu_words.add(InlineKeyboardButton(f'{word} ‚ùå', callback_data=f'{chat_id} —É–¥–∞–ª–µ–Ω–æ {word}'))
            menu_words.add(InlineKeyboardButton('–í—ã–π—Ç–∏', callback_data=f'–≤—ã–π—Ç–∏ —Å–ª–æ–≤–∞ {chat_id}'))
            bot.send_message(call.from_user.id, '–í—ã–±–µ—Ä–∏ —á—Ç–æ —Ö–æ—á–µ—à—å —É–¥–∞–ª–∏—Ç—å', reply_markup=menu_words)
    elif call_data[1] == '—É–¥–∞–ª–µ–Ω–æ':
        word = call_data[2]
        words_of_chat = read('—Å–ª–æ–≤–∞', f'{chat_id}.txt')
        words_of_chat.remove(word)
        write('—Å–ª–æ–≤–∞', words_of_chat, f'{chat_id}.txt')
        words_of_chat = read('—Å–ª–æ–≤–∞', f'{chat_id}.txt')
        if words_of_chat:
            for word in words_of_chat:
                menu_words.add(InlineKeyboardButton(f'{word} ‚ùå', callback_data=f'{chat_id} —É–¥–∞–ª–µ–Ω–æ {word}'))
            menu_words.add(InlineKeyboardButton('–í—ã–π—Ç–∏', callback_data=f'–≤—ã–π—Ç–∏ —Å–ª–æ–≤–∞ {chat_id}'))
            bot.send_message(call.from_user.id, '–í —á–∞—Ç–µ –æ—Å—Ç–∞–ª–∏—Å—å —Å–ª–æ–≤–∞:', reply_markup=menu_words)
        else:
            menu_words.add(InlineKeyboardButton('–í—ã–π—Ç–∏', callback_data=f'–≤—ã–π—Ç–∏ —Å–ª–æ–≤–∞ {chat_id}'))
            bot.send_message(call.from_user.id, '–í —á–∞—Ç–µ –±–æ–ª—å—à–µ –Ω–µ—Ç –∑–∞–ø—Ä–µ—â—ë–Ω–Ω—ã—Ö —Å–ª–æ–≤!', reply_markup=menu_words)
    elif call_data[0] == '–≤—ã–π—Ç–∏':
        chat_id = call_data[2]
        if call_data[1] == '–Ω–∞—Å—Ç—Ä–æ–π–∫–∏':
            menu_of_chats = InlineKeyboardMarkup()
            for strind_id in read('—á–∞—Ç—ã', None):
                chat_id = int(strind_id)
                if bot.get_chat_member(chat_id, call.from_user.id).status == 'creator':
                    menu_of_chats.add(
                        InlineKeyboardButton(read('—á–∞—Ç—ã', None)[strind_id], callback_data=f'{chat_id} chats_menu'))
            bot.send_message(call.from_user.id, '–í—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é —á–∞—Ç–∞\n \
–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–≤–∞!', reply_markup=menu_of_chats)
        elif call_data[1] == '—Å–ª–æ–≤–∞':
            menu_of_chats = InlineKeyboardMarkup()
            menu_of_chats.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', callback_data=f'{chat_id} —Å–æ–∑–¥–∞—Ç—å'))
            if read('—Å–ª–æ–≤–∞', f'{chat_id}.txt'):
                menu_of_chats.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', callback_data=f'{chat_id} —É–¥–∞–ª–∏—Ç—å'))
            menu_of_chats.add(InlineKeyboardButton('–í—ã–π—Ç–∏', callback_data=f'–≤—ã–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {chat_id}'))
            bot.send_message(call.from_user.id, '–í—ã –≤—ã—à–ª–∏ –≤ –º–µ–Ω—é –≥—Ä—É–ø–ø—ã\n \
–í—ã–±–µ—Ä–∏ –≤ –∫–∞–∫–æ–π –≥—Ä—É–ø–ø–µ —Ö–æ—á–µ—à—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å —Å–ª–æ–≤–∞!', reply_markup=menu_of_chats)
    elif call_data[1] == '—Å–æ–∑–¥–∞—Ç—å':
        bot.send_message(call.from_user.id, '–ü—Ä–∏—Å—ã–ª–∞–π –Ω–æ–≤—ã–µ —Å–ª–æ–≤–∞: –∫–∞–∂–¥–æ–µ –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏.\n \
–ù–∞–ø–∏—à–∏ "–≤—Å—ë", –µ—Å–ª–∏ –∑–∞–∫–æ–Ω—á–∏–ª.')
        global make_new_word
        make_new_word = [True, chat_id, call_data[0]]


@bot.message_handler(content_types=['text'])
def moderator(message):
    global make_new_word
    chat_menu = InlineKeyboardMarkup()
    chat_menu.add(InlineKeyboardButton('–î–æ–±–∞–≤–∏—Ç—å —Å–ª–æ–≤–æ', callback_data=f'{make_new_word[1]} —Å–æ–∑–¥–∞—Ç—å'))
    if read('—Å–ª–æ–≤–∞', f'{make_new_word[1]}.txt'):
        chat_menu.add(InlineKeyboardButton('–£–¥–∞–ª–∏—Ç—å —Å–ª–æ–≤–æ', callback_data=f'{make_new_word[1]} —É–¥–∞–ª–∏—Ç—å'))
    chat_menu.add(InlineKeyboardButton('–í—ã–π—Ç–∏', callback_data=f'–≤—ã–π—Ç–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ {make_new_word[1]}'))
    text = message.text.lower()
    all_words = read('—Å–ª–æ–≤–∞', f'{make_new_word[1]}.txt')
    all_chats = read('—á–∞—Ç—ã', 'daymaner')
    all_chats_id = []
    text_list = text.split(' ')
    for i in read('—Å–ª–æ–≤–∞', f'{message.chat.id}.txt'):
        word = i.split('\r')[0]
        for j in text_list:
            if word in str(j) and bot.get_chat_member(message.chat.id, message.from_user.id).status != 'creator' and \
                    bot.get_chat_member(message.chat.id, message.from_user.id).status != 'administrator':
                try:
                    if quantity_warning[str(message.from_user.id) + " " + str(message.chat.id)] < 4:
                        quantity_warning[str(message.from_user.id) + " " + str(message.chat.id)] += 1
                        if 4 - quantity_warning[str(message.from_user.id) + " " + str(message.chat.id)] == 1:
                            count = '—Ä–∞–∑'
                        else:
                            count = '—Ä–∞–∑–∞'
                        bot.send_message(message.chat.id, f'–ü—Ä–∏–≤–µ—Ç, {message.from_user.username}! \n \
@{message.from_user.username} –ø–æ–ª—É—á–∏–ª –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ.@{message.from_user.username} –æ—Ç–ø—Ä–∞–≤–∏–ª –≤ —á–∞—Ç({message.chat.title} \
) –∑–∞–ø—Ä–µ—â—ë–Ω–Ω–æ–µ —Å–ª–æ–≤–æ. –ï—Å–ª–∏ @{message.from_user.username} —Å–¥–µ–ª–∞–µ—Ç —Ç–∞–∫ –µ—â—ë \
{str(number_of_warnings - quantity_warning[str(message.from_user.id) + " " + str(message.chat.id)]) + " " + count},—Ç–æ \
—Ç–µ–±—è –∑–∞–±–∞–Ω–∏—Ç –≤ –Ω—ë–º —ç—Ç–æ—Ç –±–æ—Ç.')
                        bot.delete_message(message.chat.id, message.message_id)
                    elif quantity_warning[str(message.from_user.id) + " " + str(message.chat.id)] == 4:
                        try:
                            bot.kick_chat_member(message.chat.id, message.from_user.id)
                        except telebot.apihelper.ApiTelegramException:
                            pass
                except KeyError:
                    quantity_warning[str(message.from_user.id) + " " + str(message.chat.id)] = 1
                    bot.delete_message(message.chat.id, message.message_id)
            elif word in j and bot.get_chat_member(message.chat.id, message.from_user.id).status == 'creator' or \
                    bot.get_chat_member(message.chat.id, message.from_user.id).status == 'administrator':
                bot.delete_message(message.chat.id, message.message_id)
    for i in all_chats:
        all_chats_id.append(str(all_chats[i]))
    if text == '–≤—Å—ë':
        make_new_word[0] = False
        bot.send_message(message.from_user.id, '–ì–æ—Ç–æ–≤–æ!–ú–æ–∂–µ—à—å –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ.', reply_markup=chat_menu)
    elif str(message.chat.id) not in all_chats_id and message.chat.id != message.from_user.id:
        all_chats[str(message.chat.id)] = message.chat.title
        write('—á–∞—Ç—ã', all_chats, f'{make_new_word[1]}.txt')
    elif make_new_word[0] and message.from_user.username == your_id:
        all_words.append(text)
        write('—Å–ª–æ–≤–∞', all_words, f'{make_new_word[1]}.txt')


bot.infinity_polling()
